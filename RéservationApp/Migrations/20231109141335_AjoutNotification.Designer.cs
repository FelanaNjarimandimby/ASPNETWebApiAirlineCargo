// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RéservationApp.Data;

#nullable disable

namespace RéservationApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231109141335_AjoutNotification")]
    partial class AjoutNotification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RéservationApp.Models.Aeroport", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("AeroportCodeIATA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AeroportCodeOACI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AeroportContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AeroportLocalisation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AeroportNom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Compagnieid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("Compagnieid");

                    b.ToTable("Aeroports");
                });

            modelBuilder.Entity("RéservationApp.Models.Agent", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("AgentAdresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentFonction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentGenre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentMotPasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentNom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AgentPrenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("RéservationApp.Models.AvionCargo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<double>("AvionCapacite")
                        .HasColumnType("double precision");

                    b.Property<string>("AvionModele")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("AvionCargos");
                });

            modelBuilder.Entity("RéservationApp.Models.Client", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("ClientAdresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientMotPasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientNom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientPrenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ClientMail")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("RéservationApp.Models.Compagnie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("CompagnieNom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Compagnies");
                });

            modelBuilder.Entity("RéservationApp.Models.CoutFret", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Agentid")
                        .HasColumnType("integer");

                    b.Property<double>("Cout")
                        .HasColumnType("double precision");

                    b.Property<double>("CoutPoidsMax")
                        .HasColumnType("double precision");

                    b.Property<double>("CoutPoidsMin")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.HasIndex("Agentid");

                    b.ToTable("CoutFrets");
                });

            modelBuilder.Entity("RéservationApp.Models.Escale", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("EscaleNumero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EscaleVille")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VolCargoid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("VolCargoid");

                    b.ToTable("Escales");
                });

            modelBuilder.Entity("RéservationApp.Models.Exemple", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("cal1")
                        .HasColumnType("integer");

                    b.Property<int>("cal2")
                        .HasColumnType("integer");

                    b.Property<int>("chiffre")
                        .HasColumnType("integer");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Exemples");
                });

            modelBuilder.Entity("RéservationApp.Models.Itineraire", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("ItineraireArrive")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ItineraireDepart")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Itineraires");
                });

            modelBuilder.Entity("RéservationApp.Models.LTA", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("LTADateEmission")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LTANumero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Venteid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("Venteid");

                    b.ToTable("LTAs");
                });

            modelBuilder.Entity("RéservationApp.Models.Marchandise", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("MarchandiseDesignation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MarchandiseNombre")
                        .HasColumnType("integer");

                    b.Property<double>("MarchandisePoids")
                        .HasColumnType("double precision");

                    b.Property<double>("MarchandiseVolume")
                        .HasColumnType("double precision");

                    b.Property<int>("Nature_Marchandiseid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("Nature_Marchandiseid");

                    b.ToTable("Marchandises");
                });

            modelBuilder.Entity("RéservationApp.Models.ModèleLogin.TblMenu", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LinkName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("tbl_menu", (string)null);
                });

            modelBuilder.Entity("RéservationApp.Models.ModèleLogin.TblPermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MenuId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleId", "MenuId");

                    b.ToTable("tbl_permission", (string)null);
                });

            modelBuilder.Entity("RéservationApp.Models.ModèleLogin.TblRefreshtoken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId");

                    b.ToTable("tbl_refreshtoken", (string)null);
                });

            modelBuilder.Entity("RéservationApp.Models.ModèleLogin.TblRole", b =>
                {
                    b.Property<string>("Roleid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("roleid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Roleid");

                    b.ToTable("tbl_role", (string)null);
                });

            modelBuilder.Entity("RéservationApp.Models.ModèleLogin.TblUser", b =>
                {
                    b.Property<string>("Userid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("userid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Userid");

                    b.ToTable("tbl_user", (string)null);
                });

            modelBuilder.Entity("RéservationApp.Models.Nature_Marchandise", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("NatureMarchandiseLibelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeTarifid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("TypeTarifid");

                    b.ToTable("Nature_Marchandises");
                });

            modelBuilder.Entity("RéservationApp.Models.Notification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Clientid")
                        .HasColumnType("integer");

                    b.Property<int>("Reservationid")
                        .HasColumnType("integer");

                    b.Property<string>("Vue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Clientid");

                    b.HasIndex("Reservationid");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RéservationApp.Models.Reservation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Clientid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateExpeditionSouhaite")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Itineraireid")
                        .HasColumnType("integer");

                    b.Property<int>("Marchandiseid")
                        .HasColumnType("integer");

                    b.Property<string>("NomDestinataire")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReservationEtat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReservationExigences")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VolCargoid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("Clientid");

                    b.HasIndex("Itineraireid");

                    b.HasIndex("Marchandiseid");

                    b.HasIndex("VolCargoid");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RéservationApp.Models.TypeTarif", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<double>("TarifAnnexe")
                        .HasColumnType("double precision");

                    b.Property<double>("TarifFraisAssurance")
                        .HasColumnType("double precision");

                    b.Property<string>("TarifLibelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TarifValeur")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("TypeTarifs");
                });

            modelBuilder.Entity("RéservationApp.Models.Vente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Agentid")
                        .HasColumnType("integer");

                    b.Property<int>("Reservationid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VenteDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("Agentid");

                    b.HasIndex("Reservationid");

                    b.ToTable("Ventes");
                });

            modelBuilder.Entity("RéservationApp.Models.VolCargo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("Aeroportid")
                        .HasColumnType("integer");

                    b.Property<int>("AvionCargoid")
                        .HasColumnType("integer");

                    b.Property<int>("Itineraireid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VolDateHeureArrivee")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("VolDateHeureDepart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VolNumero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VolStatut")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Aeroportid");

                    b.HasIndex("AvionCargoid");

                    b.HasIndex("Itineraireid");

                    b.ToTable("VolCargos");
                });

            modelBuilder.Entity("RéservationApp.Models.Aeroport", b =>
                {
                    b.HasOne("RéservationApp.Models.Compagnie", "Compagnie")
                        .WithMany("Aeroports")
                        .HasForeignKey("Compagnieid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compagnie");
                });

            modelBuilder.Entity("RéservationApp.Models.CoutFret", b =>
                {
                    b.HasOne("RéservationApp.Models.Agent", "Agent")
                        .WithMany("CoutFrets")
                        .HasForeignKey("Agentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("RéservationApp.Models.Escale", b =>
                {
                    b.HasOne("RéservationApp.Models.VolCargo", "VolCargo")
                        .WithMany("Escales")
                        .HasForeignKey("VolCargoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VolCargo");
                });

            modelBuilder.Entity("RéservationApp.Models.LTA", b =>
                {
                    b.HasOne("RéservationApp.Models.Vente", "Vente")
                        .WithMany("LTAs")
                        .HasForeignKey("Venteid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vente");
                });

            modelBuilder.Entity("RéservationApp.Models.Marchandise", b =>
                {
                    b.HasOne("RéservationApp.Models.Nature_Marchandise", "Nature_Marchandise")
                        .WithMany("Marchandises")
                        .HasForeignKey("Nature_Marchandiseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nature_Marchandise");
                });

            modelBuilder.Entity("RéservationApp.Models.Nature_Marchandise", b =>
                {
                    b.HasOne("RéservationApp.Models.TypeTarif", "TypeTarif")
                        .WithMany("Nature_Marchandises")
                        .HasForeignKey("TypeTarifid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeTarif");
                });

            modelBuilder.Entity("RéservationApp.Models.Notification", b =>
                {
                    b.HasOne("RéservationApp.Models.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("Clientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RéservationApp.Models.Reservation", "Reservation")
                        .WithMany("Notifications")
                        .HasForeignKey("Reservationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RéservationApp.Models.Reservation", b =>
                {
                    b.HasOne("RéservationApp.Models.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("Clientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RéservationApp.Models.Itineraire", "Itineraire")
                        .WithMany("Reservations")
                        .HasForeignKey("Itineraireid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RéservationApp.Models.Marchandise", "Marchandise")
                        .WithMany("Reservations")
                        .HasForeignKey("Marchandiseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RéservationApp.Models.VolCargo", "VolCargo")
                        .WithMany("Reservations")
                        .HasForeignKey("VolCargoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Itineraire");

                    b.Navigation("Marchandise");

                    b.Navigation("VolCargo");
                });

            modelBuilder.Entity("RéservationApp.Models.Vente", b =>
                {
                    b.HasOne("RéservationApp.Models.Agent", "Agent")
                        .WithMany("Ventes")
                        .HasForeignKey("Agentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RéservationApp.Models.Reservation", "Reservation")
                        .WithMany("Ventes")
                        .HasForeignKey("Reservationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RéservationApp.Models.VolCargo", b =>
                {
                    b.HasOne("RéservationApp.Models.Aeroport", "Aeroport")
                        .WithMany("VolCargos")
                        .HasForeignKey("Aeroportid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RéservationApp.Models.AvionCargo", "AvionCargo")
                        .WithMany("VolCargos")
                        .HasForeignKey("AvionCargoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RéservationApp.Models.Itineraire", "Itineraire")
                        .WithMany("VolCargos")
                        .HasForeignKey("Itineraireid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aeroport");

                    b.Navigation("AvionCargo");

                    b.Navigation("Itineraire");
                });

            modelBuilder.Entity("RéservationApp.Models.Aeroport", b =>
                {
                    b.Navigation("VolCargos");
                });

            modelBuilder.Entity("RéservationApp.Models.Agent", b =>
                {
                    b.Navigation("CoutFrets");

                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("RéservationApp.Models.AvionCargo", b =>
                {
                    b.Navigation("VolCargos");
                });

            modelBuilder.Entity("RéservationApp.Models.Client", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RéservationApp.Models.Compagnie", b =>
                {
                    b.Navigation("Aeroports");
                });

            modelBuilder.Entity("RéservationApp.Models.Itineraire", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("VolCargos");
                });

            modelBuilder.Entity("RéservationApp.Models.Marchandise", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RéservationApp.Models.Nature_Marchandise", b =>
                {
                    b.Navigation("Marchandises");
                });

            modelBuilder.Entity("RéservationApp.Models.Reservation", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("RéservationApp.Models.TypeTarif", b =>
                {
                    b.Navigation("Nature_Marchandises");
                });

            modelBuilder.Entity("RéservationApp.Models.Vente", b =>
                {
                    b.Navigation("LTAs");
                });

            modelBuilder.Entity("RéservationApp.Models.VolCargo", b =>
                {
                    b.Navigation("Escales");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
